//
// Debug code
// =============================================================================

@if $debug {
/*******************************************************************************
     ____       _
    |  _ \  ___| |__  _   _  __ _
    | | | |/ _ \ '_ \| | | |/ _` |
    | |_| |  __/ |_) | |_| | (_| |
    |____/ \___|_.__/ \__,_|\__, |
                            |___/
*******************************************************************************/
}

// Breakpoint debug
@if $debug {
  html, body {
    &:before,
    &:after {
      display: block;
      font-size: 12px;
      position: absolute;
      top: 1em;
      color: $black;
      margin: 0 auto;
      width: 33%;
    }
    &:before {
      left: 1em;
    }
    &:after {
      right: 1em;
      text-align: right;
    }
  }

  html {
    @include leader(1, 12px, 'padding');

    &:before {
      top: 3em;
      left: 1em;
      right: 1em;
      text-align: center;
      content: 'Breakpoint: none (Mobile-First)';
    }

    @include breakpointDebug('$breakpoint-xxs', $breakpoint-xxs, 'before', true);
    @include breakpointDebug('$breakpoint-xs', $breakpoint-xs, 'before', true);
    @include breakpointDebug('$breakpoint-s', $breakpoint-s, 'before', true);
    @include breakpointDebug('$breakpoint-m', $breakpoint-m, 'before', true);
    @include breakpointDebug('$breakpoint-l', $breakpoint-l, 'before', true);
    @include breakpointDebug('$breakpoint-xl', $breakpoint-xl, 'before', true);
    @include breakpointDebug('$breakpoint-xxl', $breakpoint-xxl, 'before', true);
  }

  body {
    position: relative;
    @include leader(1, 12px, 'padding');

    &:before {
      content: 'Resolution: 1.0';
    }

    &:after {
      content: 'Orientation: unknown';
    }

    @include breakpointDebug('Resolution: High-res', $breakpoint-high-resolution, 'before');

    @include breakpointDebug('Orientation: Landscape', $breakpoint-orientation-landscape);
    @include breakpointDebug('Orientation: Portrait', $breakpoint-orientation-portrait);
  }
}

// =============================================================================
// Quick debug utility based on
// inuit.css by Harry Roberts
// @see: http://inuitcss.com
// =============================================================================

@if $debugHTML == true {

  /**
   * Enable this stylesheet to visually detect any improperly nested or
   * potentially invalid markup, or any potentially inaccessible code.
   *
   * Red          ==      definite error
   * Yellow       ==      double-check
   * None         ==      should be fine
   *
   * Please note that this method of checking markup quality should not be relied
   * upon entirely. Validate your markup!
   */


  /**
   * Are there any empty elements in your page?
   */
  :empty {
    outline: 5px solid $yellow;
  }


  /**
   * Images require `alt` attributes, empty `alt`s are fine but should be
   * double-checked, no `alt` is bad and is flagged red.
   */
  img {
    outline: 5px solid $red;
  }
  img[alt] {
    outline: none;
  }
  img[alt=""] {
    outline: 5px solid $yellow;
  }


  /**
   * Links sometimes, though not always, benefit from `title` attributes. Links
   * without are never invalid but it’s a good idea to check.
   */
  a {
    outline: 5px solid $yellow;
  }
  a[title] {
    outline: none;
  }


  /**
   * Double-check any links whose `href` is something questionable.
   */
  a[href="#"],
  a[href*="javascript"] {
    outline: 5px solid $yellow;
  }


  /**
   * The `target` attribute ain’t too nice...
   */
  a[target] {
    outline: 5px solid $yellow;
  }


  /**
   * Ensure any lists only contain `li`s as children.
   */
  ul,
  ol {
    > *:not(li) {
      outline: 5px solid $red;
    }
  }


  /**
   * It’s always nice to give `th`s `scope` attributes.
   */
  th {
    outline: 5px solid $yellow;
  }
  th[scope] {
    outline: none;
  }


  /**
   * `tr`s as children of `table`s ain’t great, did you need a `thead`/`tbody`?
   */
  table > tr {
    outline: 5px solid $yellow;
  }


  /**
   * `tfoot` needs to come *before* `tbody`.
   */
  tbody + tfoot {
    outline: 5px solid $yellow;
  }


  /**
   * Forms require `action` attributes
   */
  form {
    outline: 5px solid $red;
  }
  form[action] {
    outline: none;
  }


  /**
   * Various form-field types have required attributes. `input`s need `type`
   * attributes, `textarea`s need `rows` and `cols` attributes and submit buttons
   * need a `value` attribute.
   */
  textarea,
  input {
    outline: 5px solid $red;
  }
  input[type] {
    outline: none;
  }
  textarea[rows][cols] {
    outline: none;
  }
  input[type=submit] {
    outline: 5px solid $red;
  }
  input[type=submit][value] {
    outline: none;
  }


  /**
   * Avoid inline styles where possible.
   */
  [style] {
    outline: 5px solid $yellow;
  }


  /**
   * You should avoid using IDs for CSS whenever possible
   */
  [id] {
    outline: 5px solid $yellow;
  }

}/* endif */